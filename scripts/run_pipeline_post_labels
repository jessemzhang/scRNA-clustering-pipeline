#!/bin/bash 

# This script will test all full-sized data matrices for a custom distance matrix

# Inputs: Data used to generate labels, data used to test labels (same # of samples as first argument, but maybe different number of features), batch numbers (or "single" if single batch), gene names for second argument, custom labels, custom of the clust method

data=$1
check_data=$2
batches=$3
genes=$4
labels=$5
clust_method=$6

file=`echo $data | awk -F "/" '{print $NF}'`
results_dir="/data/jessez/Gene_count_clustering_results/"$clust_method
results_new_genes_dir=$results_dir"/new_genes"
results_outfile=$results_dir"/out"

mkdir $results_dir
mkdir $results_new_genes_dir
touch $results_outfile

pipeline() {

    # Save the number of samples in each cluster
    count_0=`cat $labels | grep 0 | wc -l`
    count_1=`cat $labels | grep 1 | wc -l`

    # Compute clustering quality
    clustering_quality=`python compute_clustering_quality.py $data $labels`

    # Analyze batch effect
    if [ "$batches" != "single" ]; then
	batch_check=`python check_batch_effects.py $labels $batches`
    else
	batch_check='0'
    fi

    # Extract important genes
    new_genes=$results_new_genes_dir"/new_genes_"$file"_"$clust_method
    python RF_to_select_important_genes.py $check_data $labels $genes > $new_genes

    # Check for consistency with D1 D2 genes
    d1d2_check=`python check_all_genes.py $check_data $labels $genes $new_genes`   

    # Save all data in new line
    new_line=$file"\t"$clust_method"\t"$count_0"\t"$count_1"\t"$clustering_quality"\t"$batch_check"\t"$d1d2_check
    echo -e $new_line >> $results_outfile
}

pipeline
