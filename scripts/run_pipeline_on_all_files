#!/bin/bash 

# This script will test a clustering method for lots of datasets

clust_language=$1   # either 'Rscript' or 'python'
clust_method=$2     # file name of clustering script

data_dir="/data/jessez/Gene_count_datasets"
results_dir="/data/jessez/Gene_count_clustering_results/"$clust_method
results_labels_dir=$results_dir"/labels"
results_new_genes_dir=$results_dir"/new_genes"
results_outliers_dir=$results_dir"/outliers"
results_outfile=$results_dir"/out"
existing_labels=`ls $results_labels_dir`

mkdir $results_dir
mkdir $results_labels_dir
mkdir $results_new_genes_dir
mkdir $results_outliers_dir
touch $results_outfile

listContains() {
  for word in $1; do
    [[ $word = $2 ]] && return 0
  done
  return 1
}

pipeline() {

    i=$1
    batch_type=$2
    data=$batch_dir"/"$i
    labels=$results_labels_dir"/labels_"$i # file to save labels in

    if listContains "$existing_labels" "labels"_$i; then
	echo $i" already pipelined."
    else
	echo $i" currently being pipelined..."

	if [ `echo $i | grep Outliers | wc -l` == 1 ]; then
	    cells=$data_dir"/Cells/cells_NoOutliers.txt"
	else
	    if [ "$batch_type" == "single" ]; then
		if [ `echo $i | grep 22 | wc -l` == 1 ]; then
		    cells=$data_dir"/Cells/cells_22.txt"
		elif [ `echo $i | grep 24 | wc -l` == 1 ]; then
		    cells=$data_dir"/Cells/cells_24.txt"
		elif [ `echo $i | grep 34 | wc -l` == 1 ]; then
		    cells=$data_dir"/Cells/cells_34.txt"
		else
		    cells=$data_dir"/Cells/cells_35.txt"
		fi 
	    else
		cells=$data_dir"/Cells/cells_"$batch_type".txt"
	    fi
	fi

	# Run the clustering algorithm
	if [ "$clust_language" == "Rscript" ]; then
	    Rscript "./clustering_scripts/"$clust_method".R" $data | awk -F " " '{print $2}' > $labels
	else
	    python "./clustering_scripts/"$clust_method".py" $data $results_outliers_dir"/outliers_"$i $cells  > $labels
	fi

	# Check to see if labels are generated:
	if [ `cat $labels | wc -l` > 0 ]; then

	    # Save the number of samples in each cluster
	    count_0=`cat $labels | grep 0 | wc -l`
	    count_1=`cat $labels | grep 1 | wc -l`

	    # Compute clustering quality
	    clustering_quality=`python compute_clustering_quality.py $data $labels`

	    # Analyze batch effect
	    if [ "$batch_type" != "single" ]; then
		if [ `echo $i | grep Outlier | wc -l` == 1 ]; then
		    batches=$data_dir"/Batch_nums/batch_num_NoOutliers.txt"
		else
		    batches=$data_dir"/Batch_nums/batch_num_"$batch_type".txt"
		fi
		batch_check=`python check_batch_effects.py $labels $batches`
	    else
		batch_check='0'
	    fi

	    # Extract important genes
	    new_genes=$results_new_genes_dir"/new_genes_"$i
	    if [ `echo $i | grep d1d2 | wc -l` == 1 ]; then
		# check to see if we're looking at a d1d2 dataset
		# (in which case we extract genes using original dataset)
		check_data=`echo $data | sed 's/_d1d2//g'`
	    else
		if [ `echo $i | grep Meisam | wc -l` == 1 ]; then
		    # check to see if we're looking at a data matrix made using Meisam's suggested genes
		    check_data=`echo $data | sed 's/_Meisam//g'`
		else
		    if [ `echo $i | grep RandGenes | wc -l` == 1 ]; then
			# check to see if we're using a data matrix made using random genes
			check_data=`echo $data | sed 's/_RandGenes//g'`
		    else
			check_data=$data
		    fi
		fi
	    fi
	    if [ `echo $i | grep htseq | wc -l` == 1 ]; then
		# check to see if we're looking at an htseq dataset
		genes=$data_dir"/Genes/genes_htseq.txt"
	    else
		genes=$data_dir"/Genes/genes.txt"
	    fi
	    python RF_to_select_important_genes.py $check_data $labels $genes > $new_genes

	    # Check for consistency with D1 D2 genes using d1d2 genes
	    if [ `echo $i | grep htseq | wc -l` == 1 ]; then
		d1d2_check=`python check_all_genes.py $check_data $labels $genes $new_genes htseq`   
	    else
		d1d2_check=`python check_all_genes.py $check_data $labels $genes $new_genes asdf`
	    fi

	    # Check for consistency with D1 D2 genes using d1d2 "truth" labels
	    d1d2_truth=`python check_against_truth_labels.py $labels $cells`

	    # Save all data in new line
	    new_line=$i"\t"$clust_method"\t"$count_0"\t"$count_1"\t"$clustering_quality"\t"$batch_check"\t"$d1d2_check"\t"$d1d2_truth
	else
	    new_line=$i"\t"$clust_method"\tFAILED_TO_GENERATE_LABELS"
	fi
	echo -e $new_line >> $results_outfile
    fi
}

# function to run clustering for a type of dataset
parallelize_pipeline() {
    
    local batch_type=$1 # either "all", "NoOutliers", "22_23", "24_28_30", or "single"
    batch_dir=$data_dir"/Datasets/batch_"$batch_type

    # Iterate through each dataset
    for i in `ls $batch_dir`;
    do
	pipeline $i $batch_type &
    done;
}

parallelize_pipeline "NoOutliers"
parallelize_pipeline "single"
parallelize_pipeline "22_23"
parallelize_pipeline "24_28_30"
parallelize_pipeline "all"

