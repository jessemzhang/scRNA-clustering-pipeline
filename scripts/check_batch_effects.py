#!/usr/bin/env python

# This function returns the log p value of observed distributions of samples from independent batches given the distribution of samples generated by a clustering algorithm. i.e. This function looks for batch effects. The function requies two inputs (in the following order): labels and batches. Both should be the same size and should correspond to how many samples there are (e.g. how many cells).

import sys
import numpy as np
import scipy as sp
import scipy.stats

# read in labels
labels = np.loadtxt(sys.argv[1],dtype=str)
uniq_labels = np.unique(labels)

# read in batches
batches = np.loadtxt(sys.argv[2],dtype=str)
uniq_batches = np.unique(batches)

# count how big each cluster in "labels" is
count_0 = 0
count_1 = 0
for entry in labels:
    if entry == uniq_labels[0]:
        count_0 += 1
    else:
        count_1 += 1

# set prior probabilities
p = np.array([count_0,count_1]).astype(float)/(count_0+count_1)

# run through each batch number and perform chi-squared test
overall_log_p = 0;
i = 0;
for batch in uniq_batches:

    sample_ind = 0
    batch_count_0 = 0
    batch_count_1 = 0

    # count number of batch samples in each cluster
    for sample in batches:
        if sample == batch:
            if labels[sample_ind] == uniq_labels[0]:
                batch_count_0 += 1
            else:
                batch_count_1 += 1
        sample_ind += 1

    batch_num_sample = batch_count_0+batch_count_1
    p_obs = np.array([batch_count_0,batch_count_1]).astype(float)
    p_exp = p*batch_num_sample

    test = sp.stats.chisquare(p_obs,f_exp=p_exp)

    # print p_obs
    # print p_exp
    # print test[1]

    overall_log_p += np.log(test[1])
    i += 1

print overall_log_p/i

